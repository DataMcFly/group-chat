{
  "name": "datamcfly",
  "version": "1.4.8",
  "description": "Simple REST client for DataMcFly.com",
  "main": "./index.js",
  "keywords": [
    "mongodb",
    "database",
    "web",
    "datamcfly",
    "REST",
    "socket.io"
  ],
  "engines": {
    "node": "*"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DataMcFly/datamcfly-node.git"
  },
  "author": {
    "name": "Roger Stringer"
  },
  "bugs": {
    "url": "https://github.com/DataMcFly/datamcfly-node/issues"
  },
  "dist": {
    "shasum": "9ac5f97dfe21c2ac52ded88f299f02e51314a971",
    "tarball": "http://registry.npmjs.org/datamcfly/-/datamcfly-1.1.1.tgz"
  },
  "dependencies": {
    "MD5": "1.2.1",
    "socket.io-client": "1.2.1"
  },
  "_from": "datamcfly@~1.4.4",
  "_npmVersion": "1.2.21",
  "_npmUser": {
    "name": "datamcfly",
    "email": "roger@datamcfly.com"
  },
  "maintainers": [
    {
      "name": "datamcfly",
      "email": "roger@datamcfly.com"
    }
  ],
  "directories": {},
  "_shasum": "3352fe0da736608bb18a3b8b40826fd295f53a3a",
  "_resolved": "https://registry.npmjs.org/datamcfly/-/datamcfly-1.1.1.tgz",
  "homepage": "https://github.com/DataMcFly/datamcfly-node",
  "license": "ISC",
  "readme": "Simple node.js REST client for DataMcFly.com\n===================================================\n\n- [DataMcfly](http://www.datamcfly.com) DataMcFly\n\n***\n\n## NPM datamcfly\n\n- create on your desktop empty directory with name: website\n- open terminal and find this directory: cd /Desktop/website/\n- write and run on terminal:\n\n```text\n$ npm install datamcfly\n```\n\n## Methods\n\n```js\n/*\n    DataMcFly constructor\n    @database {String}\n    @collection {String}\n    @key {String} :: get your key from http://app.datamcfly.com/\n*/\nDataMcFly(database, collection, key);\n \n/*\n    Usage / Constructor\n    @database {String}\n    @collection {String}\n    @key {String} :: get your key from http://app.datamcfly.com/\n    return {DataMcFly};\n*/\nrequire('datamcfly').init(database, collection, key);\n \n/*\n    All collection in database\n    @cb {Function} :: function(error, object)\n    return {DataMcFly}\n*/\ndatamcfly.collections(cb);\n \n/*\n    Get all documents\n    @params {Object}\n    @cb {Function} :: function(error, object)\n    return {DataMcFly}\n*/\ndatamcfly.get(params, cb);\ndatamcfly.documents(params, cb);\n \n/*\n    Listen for changes via push server\n    @event {String}\n    @cb {Function} :: function(error, data)\n    return {DataMcFly}\n*/\ndatamcfly.on(event, cb);\n\n/*\n    Push a change to push server\n    @event {String}\n    @message {String}\n*/\ndatamcfly.trigger(event, message);\n \n// Params options\n// q<query> :: restrict results by the specified JSON query\n// q = {} :: object\n// where = {} :: object\n// query = {} :: object\n \n// s<sort> :: specify the order in which to sort each specified field (1- ascending; -1 - descending)\n// s = {} :: object\n// sort = {} :: object\n// asc = ['name', 'age'] :: array\n// desc = ['name', 'age'] :: array\n \n// f<set of fields> :: specify the set of fields to include or exclude in each document (1 - include; 0 - exclude)\n// f = {} :: object\n// include = ['name', 'age'] :: array\n// exclude = ['name', 'age'] :: array\n \n// c<boolean> :: return the result count for this query\n// c = true :: boolean\n// count = true :: boolean\n \n// fo<boolean> :: return a single document from the result set (same as findOne() using the mongo shell\n// fo = true :: boolean\n// first = true :: boolean\n \n// sk<num results to skip> :: specify the number of results to skip in the result set; useful for paging\n// sk = 10 :: number\n// skip = 10 :: number\n \n// l<limit> :: specify the limit for the number of results (default is 1000)\n// l = 10 :: number\n// take = 10 :: number\n// max = 10 :: number\n// top = 10 :: number\n// limit = 10 :: number\n \n// --------\n// UPDATING\n// --------\n \n// m<boolean> :: update all documents\n// m = true :: boolean\n// all = true :: boolean\n// update-all = true :: boolean\n \n// u<boolean> :: insert the document defined in the request body if none match the specified query\n// u = true :: boolean\n// upsert = true :: boolean\n \nvar params = { where: { age: 28 }, asc: ['age'] };\n \ndatamcfly.documents('users', params, function(data) {\n     \n});\n \n/*\n    Insert document / documents\n    @collection {String}\n    @documents {String, Object or Object array}\n    @cb {Function} :: function(error, object)\n    return {DataMcFly}\n*/\ndatamcfly.set(documents, cb);\ndatamcfly.push(documents, cb);\ndatamcfly.insert(documents, cb);\n \n/*\n    Update document / documents\n    @collection {String}\n    @condition {Object or Object array}\n    @params {Object}\n    @cb {Function} :: function(error, object)\n    return {DataMcFly}\n*/\ndatamcfly.update(condition, params, cb);\n \n/*\n    Find document by Id\n    @collection {String}\n    @id {String or Number}\n    @cb {Function} :: function(error, object)\n    return {DataMcFly}\n*/\ndatamcfly.findId(id, cb);\n \n/*\n    Update document by Id\n    @collection {String}\n    @id {String or Number}\n    @document {Object}\n    @cb {Function} :: function(error, object)\n    return {DataMcFly}\n*/\ndatamcfly.updateId(id, document, cb);\n \n/*\n    Delete document by Id\n    @collection {String}\n    @id {String or Number}\n    @cb {Function} :: function(error, object)\n    return {DataMcFly}\n*/\ndatamcfly.deleteId(id, cb);\n \n```\n\n***",
  "readmeFilename": "README.md",
  "_id": "datamcfly@1.4.8"
}
